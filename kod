import numpy as np
import pandas as pd
import random
from scipy.stats import chi2_contingency
from scipy.stats import fisher_exact
from math import comb



import random
def test1(n): 
    A=0       #räknar a,b,ab utifrån 2 oberoende variabler
    B=0
    AB=0
    for i in range(n):
        random1 = random.randint(1, 10)
        random2 = random.randint(1, 10)
        a=False
        b=False
        if random1==1 or random1==2:
            a=True
            A=A+1
        if random2==1 or random2==2:
            b=True
            B=B+1
        if a==True and b==True:
            AB=AB+1
            
    return A,B,AB

print("Oberoende, 10000")  #printar en massa oberoende test 
for i in range (10):
    print(test1(10000))

print("Oberoende, 100")
for i in range (10):
    print(test1(100))

print("Oberoende, 10")
for i in range (10):
    print(test1(10))

def test2(n):
    A=0  #räknar a,b,ab utifrån en gemensam slumpvariabel. 10% för a. 10% för a ocb b. 10% för b
    B=0
    AB=0
    for i in range(n):
        a=False
        b=False
        random1 = random.randint(1, 10)
        if random1==1 or random1==2:
            A=A+1
            a=True
        if random1==2 or random1==3:
            B=B+1
            b=True
        if a==True and b==True:
            AB=AB+1
        
    return A,B,AB

print("Beroende, 10000") #printar en massa beroende test 
for i in range (10):
    print(test2(10000))

print("Beroende, 100")
for i in range (10):
    print(test2(100))

print("Beroende, 10")
for i in range (10):
    print(test2(10))



def chi(f,n): #inputs: det testet vi vill köra, antal variabler
    a,b,ab=f(n) #getting the neceesarry variables
    A=a/n       #stora bokstäver står för sannolikhet
    Ac=1-A
    B=b/n
    Bc=1-B
    if A==0 or B==0:
        return 100 # avoid dividing by 0, just setting the value to something arbitrarily high
    x1=((ab-n*A*B)**2)/(n*A*B) #This is just the chi-square formula
    x2=((a-ab-n*A*Bc)**2)/(n*A*Bc)
    x3=((b-ab-n*Ac*B)**2)/(n*Ac*B)
    x4=((n-a-b+ab-n*Ac*Bc)**2)/(n*Ac*Bc)
    x=x1+x2+x3+x4
    return x

def fisher(f,n):
    a,b,ab=f(n) #getting the neceesarry variables


print("Chi-square under 1.63 innebär den är inom 90% interval att vara oberoende.")
print("Chi-square under 3.84 innebär den är inom 97.5% interval att vara oberoende.")
print(chi(test1,1000)) #låg chi-square innebär att testet är oberoende med hög grad
print(chi(test1,100))
print(chi(test1,10))

print(chi(test2,1000)) 
print(chi(test2,100))
print(chi(test2,10))



def alpha(f,n,m):
    false_negative=0
    for i in range(m):
        if chi(f,n)>3.84:
            false_negative=false_negative+1
    alpha=false_negative/m
    print("Alpha förkastas", alpha, "% av gångerna då n =", n)
    #return(alpha)

print("när vi kör chi-testet 1000 ggr ser vi att testet av oberoende falskt förkastas: ")

alpha(test1, 1000, 1000)
alpha(test1, 100, 1000)
alpha(test1, 10, 1000)

print()
print("Det beroende testet förkastas korrekt: ")
alpha(test2, 1000, 1000)
alpha(test2, 100, 1000)
alpha(test2, 10, 1000)



def test1(n): 
    A=0       #räknar a,b,ab utifrån TVÅ oberoende variabler
    B=0
    AB=0
    for i in range(n):
        random1 = random.randint(1, 10)
        random2 = random.randint(1, 10)
        a=False
        b=False
        if random1==1 or random1==2:
            a=True
            A=A+1
        if random2==1 or random2==2:
            b=True
            B=B+1
        if a==True and b==True:
            AB=AB+1
            
    return A,B,AB

print("Oberoende, 10000")  #printar en massa oberoende test 
for i in range (10):
    print(test1(10000))

print("Oberoende, 100")
for i in range (10):
    print(test1(100))

print("Oberoende, 10")
for i in range (10):
    print(test1(10))

def test2(n):
    A=0  #räknar a,b,ab utifrån EN gemensam slumpvariabel. 10% för a. 10% för a ocb b. 10% för b
    B=0
    AB=0
    for i in range(n):
        a=False
        b=False
        random1 = random.randint(1, 10)
        if random1==1 or random1==2:
            A=A+1
            a=True
        if random1==2 or random1==3:
            B=B+1
            b=True
        if a==True and b==True:
            AB=AB+1
        
    return A,B,AB

print("Beroende, 10000") #printar en massa beroende test 
for i in range (10):
    print(test2(10000))

print("Beroende, 100")
for i in range (10):
    print(test2(100))

print("Beroende, 10")
for i in range (10):
    print(test2(10))



def chi(f,n):
        #Använder inbygda Chi-square funktionen för att få fram chi-square och p-value
        #Inputs: det testet du vill köra, storleken på N
        #outputs: chi-square, p_value
    a,b,ab=f(n)
        #skapar tabellen.
        #       A union B, A utan B
        #       B utan A,  varken A eller B
    observed = np.array([[ab,   a-ab    ], 
                         [b-ab, n-a-b+ab]])
        #print(ab + (a-ab) + (b-ab) + (n-a-b+ab))
        #kommer stöta på division med noll om a=0 eller b=0. Jag väljer att ge godtycklig hög chi_square och godtyckligt lågt p_value
    if a==0 or b==0:
        return(10, 0)
        #inbyggda chi-square funktionen
    chi_square, p_value, dof, expected = chi2_contingency(observed)
    return(chi_square, p_value)

def fisher(f,n):
        #Använder inbygda Chi-square funktionen för att få fram chi-square och p-value
        #Inputs: det testet du vill köra, storleken på N
        #outputs: chi-square, p_value
    a,b,ab=f(n)
        #skapar tabellen.
        #       A union B, A utan B
        #       B utan A,  varken A eller B
    observed = np.array([[ab,   a-ab    ], 
                         [b-ab, n-a-b+ab]])
        #print(ab + (a-ab) + (b-ab) + (n-a-b+ab))
        #kommer stöta på division med noll om a=0 eller b=0. Jag väljer att ge godtycklig hög chi_square och godtyckligt lågt p_value
#    if a==0 or b==0:
#        return(10, 0)
        #inbyggda fishers test funktionen
    oddratio, p_value = fisher_exact(observed)
    return(oddratio, p_value)
    
chi_square,p_value=chi(test1, 1000)
print(chi_square)
print(p_value)




def kontroll(method, f,N,m=1000,alpha=0.05):
        #den här funktionen kör m stycken chi_square test för att se hur många som förkastas och accepteras
        #Inputs: oberoende, beroende, Hur många randomvariabler vi testar, Hur många chi-squares vi testar, Alpha
        #Outputs: rajections, accepts    
    rejections=0
    accepts=0

        #Om p_value är lägre än alpha är nollhypotesen utanför kritiska zonen och nollhypotesen förkastas. Är nollhypotesen innanför kritiska zonen accepteras den
    for i in range (m):
        chi_square,p_value=method(f, N)
        if p_value < alpha:
            rejections=rejections+1
        else:
            accepts=accepts+1
    p_rejections=rejections/m
    p_accepts=accepts/m
 
    return p_rejections, p_accepts

print("Chi-Square Method")
print()

print("Oberoende: ")
print("Förkastas, Accepteras")
print("Type 1 error, Korrekta accepteringar")
print("N=1000:",kontroll(chi, test1, 1000))
print("N=100: ",kontroll(chi, test1, 100))
print("N=10:  ",kontroll(chi, test1, 10))
print("Vi ser att Chi-square tenderar att överförkasta nollhypotesen för låga N, men den går mer mot 0.04 ju större N som testas")

print()
print("Beroende: ")
print("Förkastas, Accepteras")
print("Korrekta Förkastningar, type 2 errors")
print("N=1000: ",kontroll(chi, test2, 1000))
print("N=100:  ",kontroll(chi, test2, 100))
print("N=10:   ",kontroll(chi, test2, 10))
print("Vi ser att Chi-square tenderar att överacceptera nollhypotesen för låga N, men går mot 0.00 ju större N som testas")




print("Fisher exact test")
print()

print("Oberoende: ")
print("Förkastas, Accepteras")
print("Type 1 error, Korrekta accepteringar")
print("N=1000:",kontroll(fisher, test1, 1000))
print("N=100: ",kontroll(fisher, test1, 100))
print("N=10:  ",kontroll(fisher, test1, 10))
print("Vi ser att Chi-square tenderar att underacceptera nollhypotesen för låga N, men den går mer mot 0.04 ju större N som testas")

print()
print("Beroende: ")
print("Förkastas, Accepteras")
print("Korrekta Förkastningar, type 2 errors")
print("N=1000: ",kontroll(fisher, test2, 1000))
print("N=100:  ",kontroll(fisher, test2, 100))
print("N=10:   ",kontroll(fisher, test2, 10))
print("Vi ser att Chi-square tenderar att överacceptera nollhypotesen för låga N, men går mot 0.00 ju större N som testas")

print("Chi-square förkastar för mycket på oberoende testet.              Förkastar för lite på beroende testet.")
print("Fisher accepterar för mycket på oberoende testet men är sämre än. Förkastar alldeles för lite på beroende testet")
